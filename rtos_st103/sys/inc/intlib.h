#ifndef _INTLIB_H_
#define _INTLIB_H_

#ifdef __cplusplus             /* Maintain C++ compatibility */
extern "C" {
#endif /* __cplusplus */

/*-----------------------------------------------------------------------------
 Section: Includes
 ---------------------------------------------------------------------------*/
#include <types.h>
#include <cpu_os.h>
/*------------------------------------------------------------------------------
Section: Macro Definitions
------------------------------------------------------------------------------*/


/*------------------------------------------------------------------------------
Section: Type Definitions
------------------------------------------------------------------------------*/
typedef struct IntRtn
{
    VOIDFUNCPTR	routine;	/* interrupt handler */
    int		parameter;	/* parameter of the handler */
} INT_RTN;

/* 中断向量表项，存放栈顶地址及ISR地址 */
typedef union
{
    VOIDFUNCPTR routine;     /* 中断处理函数地址 */
    void *msp;               /* 栈顶地址         */
} INTVECT_ITEM;

/*------------------------------------------------------------------------------
Section: Globals
------------------------------------------------------------------------------*/
/* None */

/*------------------------------------------------------------------------------
Section: Function Prototypes
------------------------------------------------------------------------------*/

/*******************************************************************************
*
* intConnect - 关联ROUTINE
*
* INPUTS: 
*   int_num   : 中断号(16 ~ INT_COUNT)
*   routine   : 中断服务
*   parameter : 中断参数
*
* RETURNS:
*   status_t: 成功-OK, 失败-ERROR
*
*******************************************************************************/
extern status_t intConnect(uint32_t int_num, VOIDFUNCPTR routine, uint32_t parameter);

/*******************************************************************************
*
* intDisconnect - 注销ROUTINE
*
* INPUTS: 
*   int_num: 中断号(16 ~ INT_COUNT)
*
* RETURNS:
*   status_t: 成功-OK, 失败-ERROR
*
*******************************************************************************/
extern status_t intDisconnect(uint32_t int_num);

/*******************************************************************************
*
* intPrioSet - 设置中断优先级
*
* INPUTS: 
*   id   : 中断号(16 ~ INT_COUNT)
*   prio : 中断优先级
*
* RETURNS:
*   status_t: 成功-OK, 失败-ERROR
*
*******************************************************************************/
extern status_t intPrioSet(uint32_t int_num, uint8_t prio);

/*******************************************************************************
*
* intLock - 关中断
*
* INPUTS: 
*   void
*
* RETURNS:
*   void
*
*******************************************************************************/
extern void intLock(void);

/*******************************************************************************
*
* intUnlock - 开中断
*
* INPUTS: 
*   void
*
* RETURNS:
*   void
*
*******************************************************************************/
extern void intUnlock(void);

/*******************************************************************************
*
* intEnable - 使能指定的中断
*
* INPUTS: 
*   int_num   : 中断号(16 ~ INT_COUNT - 1)  
*
* RETURNS:
*   status_t: 成功-OK, 失败-ERROR
*
*******************************************************************************/
extern status_t intEnable(uint32_t int_num);

/*******************************************************************************
*
* intDisable - 禁用指定的中断
*
* INPUTS: 
*   int_num   : 中断号(16 ~ INT_COUNT - 1)  
*
* RETURNS:
*   status_t: 成功-OK, 失败-ERROR
*
*******************************************************************************/
extern status_t intDisable(uint32_t int_num);

/*******************************************************************************
*
* intLibInit - 中断初始化
*
* INPUTS: 
*   void
*
* RETURNS:
*   void
*
*******************************************************************************/
extern void intLibInit(void);


void resetRoutine(void) ;
/*-----------------------------------------------------------------------------
 Section: Globals
 ----------------------------------------------------------------------------*/
extern INT_RTN intRtnTbl[];                     /* 中断实现函数入口表 */
extern uint32_t intcount;                            /* 支持的中断个数*/




  
#ifdef __cplusplus      /* Maintain C++ compatibility */
}
#endif /* __cplusplus */

#endif /* _INTLIB_H_ */

/*------------------------------End of intLib.h------------------------------*/
